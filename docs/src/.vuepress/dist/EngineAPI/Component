<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Component | Docs</title>
    <meta name="generator" content="VuePress 1.9.9">
    <link rel="icon" type="image/svg" href="RogueEngineLogo.svg">
    <meta name="description" content="Documentation for Rogue Engine">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    
    <link rel="preload" href="/assets/css/0.styles.b0e225ad.css" as="style"><link rel="preload" href="/assets/js/app.94fcaa8b.js" as="script"><link rel="preload" href="/assets/js/2.20d9d7a9.js" as="script"><link rel="preload" href="/assets/js/17.6bf4090a.js" as="script"><link rel="prefetch" href="/assets/js/10.c3bc5079.js"><link rel="prefetch" href="/assets/js/11.f04ce7fd.js"><link rel="prefetch" href="/assets/js/12.a6dd8f21.js"><link rel="prefetch" href="/assets/js/13.b7622f78.js"><link rel="prefetch" href="/assets/js/14.7ae7104a.js"><link rel="prefetch" href="/assets/js/15.12464b60.js"><link rel="prefetch" href="/assets/js/16.11757aff.js"><link rel="prefetch" href="/assets/js/18.298a4e95.js"><link rel="prefetch" href="/assets/js/19.d556c653.js"><link rel="prefetch" href="/assets/js/20.d95fb51d.js"><link rel="prefetch" href="/assets/js/21.b8411dcf.js"><link rel="prefetch" href="/assets/js/22.6d5a4a5f.js"><link rel="prefetch" href="/assets/js/23.65e94ba4.js"><link rel="prefetch" href="/assets/js/24.8d59284d.js"><link rel="prefetch" href="/assets/js/25.0e6d4219.js"><link rel="prefetch" href="/assets/js/26.966ec615.js"><link rel="prefetch" href="/assets/js/27.35d4ec29.js"><link rel="prefetch" href="/assets/js/28.0e06eff4.js"><link rel="prefetch" href="/assets/js/29.d9b3815d.js"><link rel="prefetch" href="/assets/js/3.ecde2497.js"><link rel="prefetch" href="/assets/js/30.be6cd864.js"><link rel="prefetch" href="/assets/js/31.38e49106.js"><link rel="prefetch" href="/assets/js/32.404aeb41.js"><link rel="prefetch" href="/assets/js/33.1c3bfa69.js"><link rel="prefetch" href="/assets/js/34.5a59758f.js"><link rel="prefetch" href="/assets/js/35.621cadfd.js"><link rel="prefetch" href="/assets/js/36.fb7508ca.js"><link rel="prefetch" href="/assets/js/37.d3b6eea5.js"><link rel="prefetch" href="/assets/js/38.d1da8958.js"><link rel="prefetch" href="/assets/js/39.5aff2019.js"><link rel="prefetch" href="/assets/js/4.b2741801.js"><link rel="prefetch" href="/assets/js/5.7c04658b.js"><link rel="prefetch" href="/assets/js/6.51b6028d.js"><link rel="prefetch" href="/assets/js/7.fad58021.js"><link rel="prefetch" href="/assets/js/8.924e9981.js"><link rel="prefetch" href="/assets/js/9.8d109fac.js">
    <link rel="stylesheet" href="/assets/css/0.styles.b0e225ad.css">
  </head>
  <body>
    <div id="app" data-server-rendered="true"><div class="theme-container"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/" class="home-link router-link-active"><img src="/RogueEngineLogotypeOMG.svg" alt="Docs" class="logo"> <span class="site-name can-hide">Docs</span></a> <div class="links"><div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div> <nav class="nav-links can-hide"><div class="nav-item"><a href="https://rogueengine.io" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Rogue Engine
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></div> <!----></nav></div></header> <div class="sidebar-mask"></div> <aside class="sidebar"><nav class="nav-links"><div class="nav-item"><a href="https://rogueengine.io" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Rogue Engine
  <span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a></div> <!----></nav>  <ul class="sidebar-links"><li><section class="sidebar-group depth-0"><p class="sidebar-heading"><span>Getting Started</span> <!----></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/" aria-current="page" class="sidebar-link">Installation</a></li><li><a href="/GettingStarted/YourFirstProject.html" class="sidebar-link">Your First Project</a></li><li><a href="/GettingStarted/NextSteps.html" class="sidebar-link">Next Steps</a></li></ul></section></li><li><section class="sidebar-group depth-0"><p class="sidebar-heading"><span>Workflow</span> <!----></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/Workflow/EditorLayout.html" class="sidebar-link">Editor Layout</a></li><li><a href="/Workflow/ImportingAssets.html" class="sidebar-link">Importing Assets</a></li><li><a href="/Workflow/LoadingAssets.html" class="sidebar-link">Loading Assets</a></li><li><a href="/Workflow/AssetManager.html" class="sidebar-link">Asset Manager</a></li><li><a href="/Workflow/BuildingYourProject.html" class="sidebar-link">Building Your Project</a></li><li><a href="/Workflow/StaticAssets.html" class="sidebar-link">Static Assets</a></li><li><a href="/Workflow/Marketplace.html" class="sidebar-link">Marketplace</a></li></ul></section></li><li><section class="sidebar-group depth-0"><p class="sidebar-heading"><span>Assets</span> <!----></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/Assets/Scenes.html" class="sidebar-link">Scenes</a></li><li><a href="/Assets/Materials.html" class="sidebar-link">Materials</a></li><li><a href="/Assets/Components.html" class="sidebar-link">Components</a></li><li><a href="/Assets/AudioAssets.html" class="sidebar-link">Audio Assets</a></li><li><a href="/Assets/Prefabs.html" class="sidebar-link">Prefabs</a></li></ul></section></li><li><section class="sidebar-group depth-0"><p class="sidebar-heading open"><span>Engine API</span> <!----></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/EngineAPI/App.html" class="sidebar-link">App</a></li><li><a href="/EngineAPI/AudioAsset.html" class="sidebar-link">AudioAsset</a></li><li><a href="/EngineAPI/Component.html" class="active sidebar-link">Component</a></li><li><a href="/EngineAPI/Debug.html" class="sidebar-link">Debug</a></li><li><section class="sidebar-group is-sub-group depth-1"><p class="sidebar-heading"><span>Input</span> <!----></p> <ul class="sidebar-links sidebar-group-items"><li><a href="/EngineAPI/Input/Mouse.html" class="sidebar-link">Mouse</a></li><li><a href="/EngineAPI/Input/Keyboard.html" class="sidebar-link">Keyboard</a></li><li><a href="/EngineAPI/Input/TouchController.html" class="sidebar-link">TouchController</a></li><li><a href="/EngineAPI/Input/GamepadController.html" class="sidebar-link">GamepadController</a></li></ul></section></li><li><a href="/EngineAPI/Prefab.html" class="sidebar-link">Prefab</a></li><li><a href="/EngineAPI/Runtime.html" class="sidebar-link">Runtime</a></li><li><a href="/EngineAPI/SceneController.html" class="sidebar-link">SceneController</a></li><li><a href="/EngineAPI/Functions.html" class="sidebar-link">Functions</a></li><li><a href="/EngineAPI/Events.html" class="sidebar-link">Events</a></li><li><a href="/EngineAPI/Tags.html" class="sidebar-link">Tags</a></li></ul></section></li></ul> </aside> <main class="page"> <div class="theme-default-content content__default"><h3 id="component"><a href="#component" class="header-anchor">#</a> Component</h3> <p>A component adds functionality to an <a href="https://threejs.org/docs/#api/en/core/Object3D" target="_blank" rel="noopener noreferrer">Object3D<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>. An object can have multiple components but an instance of a component can be directly related to only one <strong>Object3D</strong>.</p> <p>The <strong>Component</strong> class defines the behavior of a component. We need to extend from this class to create our own components. We should never call the Component's methods ourselves. These are to be called exclusively within the Engine.</p> <p>When creating a component through the editor's interface (Assets -&gt; Component) a component will be created with the standard template, so you shouldn't have to create a component by hand but, in any case, let's see how hey are built.</p> <p>In the following example, we have a component <strong>MyComponent</strong> which extends the class <strong>Component</strong>. After defining it, we register it. If we don't register it, the component won't be accessible from anywhere. This is the way to let the Engine acknowledge it.</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">RE</span> <span class="token keyword">from</span> <span class="token string">'rogue-engine'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">RE</span></span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
<span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token constant">RE</span><span class="token punctuation">.</span><span class="token function">registerComponent</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div><h3 id="constructor"><a href="#constructor" class="header-anchor">#</a> Constructor</h3> <div class="language-typescript extra-class"><pre class="language-typescript"><code>
<span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> object3d<span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>Object3D<span class="token punctuation">)</span>

</code></pre></div><p>The <strong>Component</strong> class constructor takes a <strong>name</strong> string and an <strong>Object3D</strong> as parameters. The <strong>Object3D</strong> will be assigned to the <strong>Component.object3d</strong> property. Normally, after instantiating a component you would need to add it with the engine's <strong>addComponent()</strong> function, otherwise, the component will be there on standby doing nothing.</p> <p>In the following example, we import our component <strong>MyComponent</strong> and use the <a href="https://threejs.org/docs/#api/en/core/Object3D.getObjectByName" target="_blank" rel="noopener noreferrer">getObjectByName<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> method in the <strong>App.currentScene</strong> object which is the current Three.js <a href="https://threejs.org/docs/#api/en/scenes/Scene" target="_blank" rel="noopener noreferrer">Scene<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a>. Then we instantiate the component and add it to the engine's component map with <a href="/EngineAPI/Functions#addComponent">addComponent</a>. That's the cue for the engine to start executing its behavior methods in the next cycle.</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code>
<span class="token keyword">import</span> <span class="token punctuation">{</span> addComponent<span class="token punctuation">,</span> App <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rogue-engine'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MyComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./MyComponent'</span>
<span class="token operator">...</span>
<span class="token keyword">const</span> object3d <span class="token operator">=</span> App<span class="token punctuation">.</span>currentScene<span class="token punctuation">.</span><span class="token function">getObjectByName</span><span class="token punctuation">(</span>MyObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span>MyComponentName<span class="token punctuation">,</span> object3d<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">addComponent</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>

</code></pre></div><h3 id="decorators"><a href="#decorators" class="header-anchor">#</a> Decorators</h3> <p>We can use decorators to provide a graphic interface for our component properties within the editor. In order to do this we need to fetch the decorators from <code>RE.props</code>.</p> <h4 id="re-props"><a href="#re-props" class="header-anchor">#</a> RE.props</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code>props<span class="token operator">:</span> Props
</code></pre></div><p>This object contains all the available decorators.</p> <p>Each of these decorators will show a certain graphic interface for specific types of properties.</p> <p>Here's a detailed list of all the possible decorators.</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">RE</span> <span class="token keyword">from</span> <span class="token string">'rogue-engine'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">RE</span></span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">num</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> slider <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">checkbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> toggleSomething <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> textInput <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> textArea <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token string">&quot;html&quot;</span><span class="token punctuation">)</span> inlineCodeEditor <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// options: &quot;json&quot; | &quot;html&quot; | &quot;glsl&quot;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> dropdown <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  dropdownOptions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;option1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;option2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> textInput <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">vector2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">THREE</span></span><span class="token punctuation">.</span><span class="token function">Vector2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">vector3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">THREE</span></span><span class="token punctuation">.</span><span class="token function">Vector3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">object3d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> hierarchyObj<span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>Object3D<span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">prefab</span><span class="token punctuation">(</span><span class="token punctuation">)</span> prefab<span class="token operator">:</span> <span class="token constant">RE</span><span class="token punctuation">.</span>Prefab<span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">material</span><span class="token punctuation">(</span><span class="token punctuation">)</span> mat<span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>Material<span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">texture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> texture<span class="token operator">:</span> <span class="token constant">TREE</span><span class="token punctuation">.</span>Texture<span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">audio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> sound<span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>Audio<span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">audio</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> positionalSound<span class="token operator">:</span> <span class="token constant">TREE</span><span class="token punctuation">.</span>PositionalAudio<span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> clip<span class="token operator">:</span> <span class="token constant">TREE</span><span class="token punctuation">.</span>AnimationClip<span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">texture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> texture<span class="token operator">:</span> <span class="token constant">TREE</span><span class="token punctuation">.</span>Texture<span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">button</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/*Do Stuff*/</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
doSomethingLabel <span class="token operator">=</span> <span class="token string">&quot;Do Something&quot;</span><span class="token punctuation">;</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> serializeThis <span class="token operator">=</span> <span class="token punctuation">{</span>prop<span class="token operator">:</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="prop-dropped"><a href="#prop-dropped" class="header-anchor">#</a> Prop (Dropped)</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>This is no longer supported, use <a href="#decorators">RE.props</a> instead</strong></p> <p>The <strong>@Prop</strong> decorator helps us define our component's <a href="#component-interface">interface</a> in a much cleaner way. The decorated properties will show in the editor, in our component's inspector.</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">RE</span> <span class="token keyword">from</span> <span class="token string">'rogue-engine'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">RE</span></span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  myNumber<span class="token punctuation">;</span> <span class="token comment">// Won't show in the editor</span>
  @<span class="token constant">RE</span><span class="token punctuation">.</span><span class="token function">Prop</span><span class="token punctuation">(</span><span class="token string">&quot;Vector3&quot;</span><span class="token punctuation">)</span> myVector<span class="token punctuation">;</span> <span class="token comment">// Will show in the editor</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Allowed types are the same as for the <a href="#component-interface">interface static property</a>.</p> <h3 id="properties"><a href="#properties" class="header-anchor">#</a> Properties</h3> <h4 id="name"><a href="#name" class="header-anchor">#</a> .name</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code>name<span class="token operator">:</span> <span class="token builtin">string</span>
</code></pre></div><p>The name of the component. This can be used as an identifier to retrieve it with the <a href="Functions#getcomponentbyname">getComponentByName</a> function.</p> <h4 id="component-interface"><a href="#component-interface" class="header-anchor">#</a> Component.interface</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code>
<span class="token keyword">static</span> <span class="token keyword">interface</span><span class="token operator">:</span> ComponentInterface

</code></pre></div><p>The static interface object defines the graphic interface of our component.</p> <p>This is handled in the background by the <a href="#decorators">property decorators</a> so for most cases, it's encouraged to leave this alone and use that instead.</p> <p>This property has a ComponentInterface type which, maps a property name with a specific string describing the type of the property:</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ComponentInterface</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span>
    <span class="token operator">|</span> <span class="token string">&quot;String&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;Number&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;Boolean&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;Vector3&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;Vector2&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;Select&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;Object3D&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;Prefab&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;Texture&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;Material&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;Color&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;Audio&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;PositionalAudio&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Each of these options will display a different type of property controller interface in the Component inspector.</p> <p>Keep in mind that <strong>propName</strong> must be a valid public property within the component.</p> <p>Example</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">RE</span> <span class="token keyword">from</span> <span class="token string">'rogue-engine'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">RE</span></span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  speed<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token keyword">interface</span><span class="token operator">:</span> <span class="token constant">RE</span><span class="token punctuation">.</span>ComponentInterface <span class="token operator">=</span> <span class="token punctuation">{</span>
    speed<span class="token operator">:</span> <span class="token string">'Number'</span>
  <span class="token punctuation">}</span>
<span class="token operator">...</span>

</code></pre></div><h4 id="object3d"><a href="#object3d" class="header-anchor">#</a> .object3d</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token keyword">readonly</span> object3d<span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>Object3D
</code></pre></div><p>This is the <a href="https://threejs.org/docs/#api/en/core/Object3D" target="_blank" rel="noopener noreferrer">Object3D<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> to which this component belongs.</p> <h4 id="isready"><a href="#isready" class="header-anchor">#</a> .isReady</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token keyword">readonly</span> isReady<span class="token operator">:</span> <span class="token builtin">boolean</span>
</code></pre></div><p>This property returns the ready state of the component. A component is considered ready when all of the assets declared in its interface property are loaded.</p> <p>A component that is not ready will only execute the <a href="#awake">awake</a> method. As soon as the component is ready its <a href="#start">start</a> method will be executed and it will join the next update cycle.</p> <p>When using the component from another script, you should check this property to make sure the assets declared in its interface property are loaded before using them. you can safely use them in all methods of the component they belong to, with exception of its <a href="#awake">awake</a> method.</p> <p>If all the assets declared in its interface property are set to <strong>preload</strong> in the <a href="/Workflow/AssetManager">AssetManager</a> or have been <strong>kept loaded</strong> from previous scenes, the component will be immediately ready.</p> <h3 id="methods"><a href="#methods" class="header-anchor">#</a> Methods</h3> <p>All of the following methods are meant to be overridden. This means that they should be declared within your component class if you need them. But that's all you should do with them. They will be called internally by the engine and you should never call them in your code.</p> <h4 id="awake"><a href="#awake" class="header-anchor">#</a> .awake</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token function">awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><p>If the scene is not running, the <strong>awake</strong> methods of all components in that scene are called by the engine right before the first render.</p> <p>If the scene is running, this method is called by the engine immediately after the component is initialized.</p> <h4 id="start"><a href="#start" class="header-anchor">#</a> .start</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><p>If the scene is not running, the start methods of all components in that scene are called by the engine right after the first render.</p> <p>If the scene is running, this method is called by the engine as soon as the <a href="#isReady">isReady</a> property of the component returns <code>true</code>, which means that all of the assets referenced in its <a href="#component-interface">interface</a> are loaded.</p> <h4 id="beforeupdate"><a href="#beforeupdate" class="header-anchor">#</a> .beforeUpdate</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><p>This method is called by the engine just before the <a href="#update">update</a> method. It defines the very beginning of every frame for a component. It should be used exclusively for things that need to be available before all the <a href="#update">update</a> methods are executed.</p> <h4 id="update"><a href="#update" class="header-anchor">#</a> .update</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><p>This method is called by the engine just after <a href="#beforeupdate">beforeUpdate</a> and right before <a href="#afterupdate">afterUpdate</a>. Here's where you, for example, move objects in your scene. Be mindful that this will be called every frame and will stack up with the rest of the components in your scene. Remember: keep your code tight and your frame rate high.</p> <h4 id="afterupdate"><a href="#afterupdate" class="header-anchor">#</a> .afterUpdate</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token function">afterUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><p>This method is called by the engine just after <a href="#update">update</a> and it marks the end of every cycle of the animation loop. Here's where you add things that need to happen after all the <a href="#update">update</a> methods have been called.</p> <h4 id="onbeforeremoved"><a href="#onbeforeremoved" class="header-anchor">#</a> .onBeforeRemoved</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token function">onBeforeRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><p>This method will be executed when the <a href="/EngineAPI/Functions#removecomponent">removeComponent</a> method is called with this component as a parameter, just before removing it from the components map.</p> <h4 id="onremoved"><a href="#onremoved" class="header-anchor">#</a> .onRemoved</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token function">onRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><p>This method will be executed when the <a href="/EngineAPI/Functions#removecomponent">removeComponent</a> method is called with this component as a parameter, right after it has been effectively removed from the components map and the scene.</p> <h4 id="onbeforeobjectremoved"><a href="#onbeforeobjectremoved" class="header-anchor">#</a> .onBeforeObjectRemoved</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token function">onBeforeObjetRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><p>This method will be executed just <em>before</em> the <a href="https://threejs.org/docs/#api/en/core/Object3D.remove" target="_blank" rel="noopener noreferrer">remove<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> method for the <code>Object3D</code> to which this object belongs is called.</p> <h4 id="onobjectremoved"><a href="#onobjectremoved" class="header-anchor">#</a> .onObjectRemoved</h4> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token function">onObjectRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><p>This method will be executed right <em>after</em> the <a href="https://threejs.org/docs/#api/en/core/Object3D.remove" target="_blank" rel="noopener noreferrer">remove<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> method for the <a href="https://threejs.org/docs/#api/en/core/Object3D" target="_blank" rel="noopener noreferrer">Object3D<span><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg> <span class="sr-only">(opens new window)</span></span></a> to which this object belongs is called.</p></div> <footer class="page-edit"><!----> <!----></footer> <!----> </main></div><div class="global-ui"></div></div>
    <script src="/assets/js/app.94fcaa8b.js" defer></script><script src="/assets/js/2.20d9d7a9.js" defer></script><script src="/assets/js/17.6bf4090a.js" defer></script>
  </body>
</html>
